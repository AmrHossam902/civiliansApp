AWSTemplateFormatVersion: '2010-09-09'
Description: deploy stack infrastructure
Resources:

  ###############
  ### Network ###
  ###############

  CiviliansVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "150.0.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: "default"

  CiviliansSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1a"
      CidrBlock: "150.0.16.0/20"
      VpcId: !Ref CiviliansVpc

  CiviliansSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-east-1b"
      CidrBlock: "150.0.32.0/20"
      VpcId: !Ref CiviliansVpc

  CiviliansInternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties: {}

  CiviliansVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref CiviliansVpc
      InternetGatewayId: !Ref CiviliansInternetGateway

  CiviliansVpcRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CiviliansVpc

  CiviliansRouteRule1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref CiviliansVpcRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CiviliansInternetGateway

  CiviliansRouteTableSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref CiviliansSubnet1
      RouteTableId: !Ref CiviliansVpcRouteTable

  CiviliansRouteTableSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref CiviliansSubnet2
      RouteTableId: !Ref CiviliansVpcRouteTable     


  #######################
  ### security groups ###
  #######################

  CiviliansALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "this SG controls traffic goining into /out of the ALB" # Required
      GroupName: "civilians-alb-sg" # Required
      VpcId: !Ref CiviliansVpc

  FrontEndSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "this SG controls traffic going into the frontend service"
      GroupName: "civilians-frontend-sg"
      VpcId: !Ref CiviliansVpc
  
  BackEndSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "this SG controls traffic going into the backend service"
      GroupName: "civilians-backend-sg"
      VpcId: !Ref CiviliansVpc

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "this SG controls traffic going into the RDS instance"
      GroupName: "civilians-rds-sg"
      VpcId: !Ref CiviliansVpc


  #############################
  ### security groups rules ###
  #############################

  ALBSecurityGroupInboundRule1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref CiviliansALBSecurityGroup 
      CidrIp: "0.0.0.0/0" 
      FromPort: 80
      ToPort: 80
      IpProtocol: "tcp"

  ALBSecurityGroupOutboundRule1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref CiviliansALBSecurityGroup
      DestinationSecurityGroupId: !Ref FrontEndSecurityGroup
      FromPort: 80
      IpProtocol: "tcp"
      ToPort: 80
  
  ALBSecurityGroupOutboundRule2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref CiviliansALBSecurityGroup
      DestinationSecurityGroupId: !Ref BackEndSecurityGroup
      FromPort: 80
      IpProtocol: "tcp"
      ToPort: 80
  
  FrontEndSecurityGroupInboundRule1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref FrontEndSecurityGroup
      SourceSecurityGroupId: !Ref CiviliansALBSecurityGroup
      IpProtocol: "tcp"
      FromPort: 80
      ToPort: 80

  FrontEndSecurityGroupOutboundRule1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref FrontEndSecurityGroup
      DestinationSecurityGroupId: !Ref BackEndSecurityGroup
      FromPort: 80
      IpProtocol: "tcp"
      ToPort: 80

  BackEndSecurityGroupInboundRule1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref BackEndSecurityGroup
      SourceSecurityGroupId: !Ref CiviliansALBSecurityGroup
      FromPort: 80
      ToPort: 80
      IpProtocol: "tcp"

  BackEndSecurityGroupInboundRule2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref BackEndSecurityGroup
      SourceSecurityGroupId: !Ref FrontEndSecurityGroup
      FromPort: 80
      ToPort: 80
      IpProtocol: "tcp"    

  BackEndSecurityGroupOutboundRule1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref BackEndSecurityGroup
      DestinationSecurityGroupId: !Ref DatabaseSecurityGroup
      IpProtocol: "tcp"
      FromPort: 3306
      ToPort: 3306

  RDSSecurityGroupInboundRule1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !Ref DatabaseSecurityGroup
      SourceSecurityGroupId: !Ref BackEndSecurityGroup
      IpProtocol: "tcp"
      FromPort: 3306
      ToPort: 3306

  RDSSecurityGroupOutboundRule1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref DatabaseSecurityGroup
      CidrIp: "0.0.0.0/0"
      IpProtocol: "-1"


  #################
  ### Resources ###
  #################

  CiviliansLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: "application"
      Name: "civilians-load-balancer"
      Scheme: "internet-facing"
      IpAddressType: "ipv4"
      Subnets: 
        - !Ref CiviliansSubnet1
        - !Ref CiviliansSubnet2
      SecurityGroups: 
        - !Ref CiviliansALBSecurityGroup

  FrontEndTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: "frontend-tg"
        HealthCheckEnabled: true
        HealthCheckIntervalSeconds: 30
        HealthCheckPath: "/"
        HealthCheckPort: "80"
        HealthCheckProtocol: "HTTP"
        HealthCheckTimeoutSeconds: 15
        HealthyThresholdCount: 2
        UnhealthyThresholdCount: 3
        IpAddressType: "ipv4"
        Matcher:
          HttpCode: "200"
        Port: 80
        Protocol: "HTTP"
        ProtocolVersion: "HTTP1"
        TargetType: "ip"
        VpcId: !Ref CiviliansVpc

  BackEndTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: "backend-tg"
        HealthCheckEnabled: true
        HealthCheckIntervalSeconds: 30
        HealthCheckPath: "/"
        HealthCheckPort: "80"
        HealthCheckProtocol: "HTTP"
        HealthCheckTimeoutSeconds: 15
        HealthyThresholdCount: 2
        UnhealthyThresholdCount: 3
        IpAddressType: "ipv4"
        Matcher:
          HttpCode: "200"
        Port: 80
        Protocol: "HTTP"
        ProtocolVersion: "HTTP1"
        TargetType: "ip"
        VpcId: !Ref CiviliansVpc

  CiviliansLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: "HTTP"
      LoadBalancerArn: !Ref CiviliansLoadBalancer # Required
      DefaultActions: # Required
        - Type: "forward"
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref FrontEndTargetGroup
                Weight: 1

  ForwawrdToBackEndListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackEndTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "/graphql/*"
      ListenerArn: !Ref CiviliansLoadBalancerListener
      Priority: 1

  CiviliansECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders: 
      - FARGATE
      DefaultCapacityProviderStrategy: 
      - Base: 1
        CapacityProvider: FARGATE

  CiviliansDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for my RDS instance"
      SubnetIds: 
        - !Ref CiviliansSubnet1
        - !Ref CiviliansSubnet2

  CiviliansDb:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: "civiliansDb"

      Engine: "mysql"
      EngineVersion: "8.0.41"
      EngineLifecycleSupport: "open-source-rds-extended-support-disabled"

      DBInstanceClass: "db.t4g.micro"
      DBInstanceIdentifier: "civilians-db-instance"

      StorageType: "gp2"
      AllocatedStorage: "20"
      MaxAllocatedStorage: 20
      StorageEncrypted: false

      AvailabilityZone: "us-east-1a"
      MultiAZ: false
      PubliclyAccessible: false
      NetworkType: "IPV4"
      Port: "3306"
      DatabaseInsightsMode: "standard"
      DeletionProtection: false

      ManageMasterUserPassword: false #want to manage master user pass with secrets manager ?
      MasterUsername: "root"
      MasterUserPassword: "pwivY5aW8EPPtWB"

      DBParameterGroupName: "default.mysql8.0"
      DBSubnetGroupName: !Ref CiviliansDBSubnetGroup

      VPCSecurityGroups: 
        - !Ref DatabaseSecurityGroup

      MonitoringInterval: "0"
      

###############
### Outputs ###
###############

Outputs:
  CiviliansECSCluster:
    Value: !Ref CiviliansECSCluster
    Export: 
      Name: CiviliansECSCluster

  CiviliansALBDNS:
    Value: !GetAtt CiviliansLoadBalancer.DNSName
    Export:
      Name: CiviliansALBDNS

  CiviliansDbDNS:
    Value: !GetAtt CiviliansDb.DNSName
    Export:
      Name:  CiviliansDbDNS